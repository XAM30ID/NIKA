from traceback import format_exc
from asgiref.sync import sync_to_async

from django.shortcuts import render
from django.conf import settings
from django.http import HttpRequest, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_GET, require_POST

from telebot.apihelper import ApiTelegramException
from telebot.types import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message, InputMediaPhoto

from bot import bot, logger, UsersStates
from nika.settings import ADMINS
from .handlers.common import format_session_text, format_place_text, replace_message
from .models import GeneralInfo, Session, Place, OptionalInfo

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
general = GeneralInfo.objects.first()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
first_markup = InlineKeyboardMarkup(row_width=1)
first_markup.add(
    InlineKeyboardButton(text='–°–º–µ–Ω—ã', callback_data='main.sessions'),
    InlineKeyboardButton(text='–ú–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', callback_data='main.places'),
    InlineKeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='main.more_info')
)


def refresh_general():
    '''
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    '''
    global general
    general = GeneralInfo.objects.first()


@require_GET
def set_webhook(request: HttpRequest) -> JsonResponse:
    '''
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±–æ—Ç–∞
    '''
    bot.set_webhook(url=f"{settings.HOOK}/bot/{settings.BOT_TOKEN}", allowed_updates=['message', 'callback_query'])
    bot.send_message(settings.OWNER_ID, "webhook set")
    return JsonResponse({"message": "OK"}, status=200)


@csrf_exempt
@require_POST
@sync_to_async
def index(request: HttpRequest) -> JsonResponse:
    '''
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–∞–π—Ç–∞
    '''
    if request.META.get("CONTENT_TYPE") != "application/json":
        return JsonResponse({"message": "Bad Request"}, status=403)

    json_string = request.body.decode("utf-8")
    update = Update.de_json(json_string)
    try:
        bot.process_new_updates([update])
    except ApiTelegramException as e:
        logger.error(f"Telegram exception. {e} {format_exc()}")
    except ConnectionError as e:
        logger.error(f"Connection error. {e} {format_exc()}")
    except Exception as e:
        bot.send_message(settings.OWNER_ID, f'Error from index: {e}')
        logger.error(f"Unhandled exception. {e} {format_exc()}")
    return JsonResponse({"message": "OK"}, status=200)


@bot.message_handler(commands=["start"])
def start_command(message: Message):
    '''
        –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    '''
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ö–æ–º–∞–Ω–¥–∞ /start –≤ —á–∞—Ç–µ {message.chat.id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    bot.send_message(
        chat_id=message.chat.id, 
        text=general.start_text, 
        parse_mode='html', 
        reply_markup=first_markup
        )
    

@bot.message_handler(commands=["help"])
def help_command(message: Message):
    '''
        –ö–æ–º–∞–Ω–¥–∞ help
    '''
    bot.send_message(
        chat_id=message.chat.id, 
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", 
        parse_mode='html', 
        reply_markup=InlineKeyboardMarkup(keyboard=[[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data="main.cancel")]])
        )
    bot.set_state(user_id=message.from_user.id, state=UsersStates.help_request, chat_id=message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('main.'))
def main_callbacks(call: CallbackQuery):
    '''
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –æ—Å–Ω–æ–≤–Ω—ã—Ö Inline-–∫–Ω–æ–ø–æ–∫
    '''
    call_value = call.data.split('.')[-1]
    logger.info(f'–û–¢–õ–ê–î–ö–ê: –ù–∞–∂–∞—Ç–∞ Inline-–∫–Ω–æ–ø–∫–∞. –ó–Ω–∞—á–µ–Ω–∏–µ {call_value}')

    markup = InlineKeyboardMarkup(row_width=1)
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ
    if call_value == 'cancel':
        replace_message(call, bot, first_markup, general.start_text)
        bot.delete_state(user_id=call.from_user.id, chat_id=call.message.chat.id)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ
    if call_value == 'return':
        replace_message(call, bot, first_markup, general.start_text)


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–º–µ–Ω
    if call_value == 'sessions':
        all_sessions = Session.objects.all()
        if len(all_sessions) == 0:
            markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))

            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id, 
                text='–°–º–µ–Ω –ø–æ–∫–∞ –Ω–µ—Ç)', 
                reply_markup=markup
                )
        
        else:
            for session in all_sessions:
                markup.add(
                    InlineKeyboardButton(text=session.title, callback_data=f's.{session.slug}')
                )
                
            markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))

            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id, 
                text='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–º–µ–Ω:', 
                reply_markup=markup
                )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    elif call_value == 'places':
        all_places = Place.objects.all()
        if len(all_places) == 0:
            markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))

            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id, 
                text='–ú–µ—Å—Ç –ø–æ–∫–∞ –Ω–µ—Ç)', 
                reply_markup=markup
                )
        
        else:
            for place in all_places:
                markup.add(InlineKeyboardButton(text=place.title, callback_data=f'p.{place.slug}'))
                
            markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))

            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id, 
                text='–≠—Ç–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–º–µ–Ω—ã. –û –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', 
                reply_markup=markup
                )   

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ 
    elif call_value == 'more_info':
        all_infos = OptionalInfo.objects.all()
        if len(all_infos) == 0:
            markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))

            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id, 
                text='–ü–æ–∫–∞ —á—Ç–æ –Ω–∞–º –Ω–µ—á–µ–≥–æ –í–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å)', 
                reply_markup=markup)
        
        else:
            for info in all_infos:
                markup.add(InlineKeyboardButton(text=info.title, callback_data=f'i.{info.slug}'))
                
            markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))

            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id, 
                text='–í–æ—Ç —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', 
                reply_markup=markup
                )
            

@bot.callback_query_handler(func=lambda call: call.data.startswith('s.'))
def session_callback(call: CallbackQuery):
    '''
        –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–º–µ–Ω–µ
    '''
    markup = InlineKeyboardMarkup(row_width=1)

    session_slug = call.data.split('.')[-1]

    if session_slug == 'return':
        all_sessions = Session.objects.all()

        for session in all_sessions:
            markup.add(
                InlineKeyboardButton(text=session.title, callback_data=f's.{session.slug}')
            )
            
        markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))

        replace_message(call, bot, markup, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω')
    else:
        session = Session.objects.get(slug=session_slug)

        if not session.form_url is None:
            if session.form_url.strip() != '' and not session.form_url is None:
                markup.add(InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!', url=session.form_url))

        markup.add(InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É —Å–º–µ–Ω üìÉ', callback_data='s.return'))
        markup.add(InlineKeyboardButton(text='–í –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è', callback_data='main.return'))

        if session.pk:
            if not session.image is None and not session.image == '':
                with open(f'{settings.BASE_DIR}//{session.image.url}', 'rb') as file:
                    try:
                        bot.delete_message(
                            chat_id=call.message.chat.id, 
                            message_id=call.message.id
                        )
                    except Exception as e:
                        logger.error(f'–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')
                    bot.send_photo(
                        chat_id=call.message.chat.id, 
                        photo=file,
                        caption=format_session_text(session=session),
                        reply_markup=markup,
                        parse_mode='html'
                        )
            else:
                return bot.edit_message_text(
                    chat_id=call.message.chat.id, 
                    message_id=call.message.message_id, 
                    text=format_session_text(session=session),
                    reply_markup=markup,
                    parse_mode='html'
                    )

        else:
            return bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id, 
                text='–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞(', 
                reply_markup=markup
                )
        

@bot.callback_query_handler(func=lambda call: call.data.startswith('p.'))
def place_callback(call: CallbackQuery):
    '''
        –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    '''
    markup = InlineKeyboardMarkup(row_width=1)

    place_slug = call.data.split('.')[-1]

    if place_slug == 'return':
        all_places = Place.objects.all()

        for place in all_places:
            markup.add(
                InlineKeyboardButton(text=place.title, callback_data=f'p.{place.slug}')
            )
            
        markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))
        if call.message.content_type == 'location':
            replace_message(call, bot, markup, '–≠—Ç–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–º–µ–Ω—ã. –û –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', 2)
        else:
            replace_message(call, bot, markup, '–≠—Ç–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–º–µ–Ω—ã. –û –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', 1)
    else:
        markup.add(InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É –º–µ—Å—Ç üìÉ', callback_data='p.return'))
        markup.add(InlineKeyboardButton(text='–í –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è', callback_data='main.return'))

        place = Place.objects.get(slug=place_slug)
        
        if place.pk:

            if not place.latitude is None and not place.longitude is None:
                replace_message(call, bot, None, format_place_text(place=place))
                return bot.send_location(
                    chat_id=call.message.chat.id,
                    latitude=place.latitude,
                    longitude=place.longitude,
                    reply_markup=markup
                )
            else:
                return replace_message(call, bot, markup, format_place_text(place=place))

        else:
            return replace_message(call, bot, markup, '–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')


@bot.callback_query_handler(func=lambda call: call.data.startswith('i.'))
def optional_info_callback(call: CallbackQuery):
    '''
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    '''
    markup = InlineKeyboardMarkup(row_width=1)

    info_slug = call.data.split('.')[-1]
    print(info_slug)
    if info_slug == 'return':
        all_infos = OptionalInfo.objects.all()

        for info in all_infos:
            markup.add(
                InlineKeyboardButton(text=info.title, callback_data=f'i.{info.slug}')
            )
            
        markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='main.return'))
        replace_message(call, bot, markup, '–í–æ—Ç —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤:')
    
    else:
        markup.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='i.return'))
        info = OptionalInfo.objects.get(slug=info_slug)
        print(info.is_photo, info.file)
        if info.is_photo and not info.file is None and not info.file == '':
            with open(f'{settings.BASE_DIR}//{info.file.url}', 'rb') as file:
                    try:
                        bot.delete_message(
                            chat_id=call.message.chat.id, 
                            message_id=call.message.id
                        )
                    except Exception as e:
                        logger.error(f'–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')
                    bot.send_photo(
                        chat_id=call.message.chat.id, 
                        photo=file,
                        caption=info.text,
                        reply_markup=markup,
                        parse_mode='html'
                        )
        
        else:
            if not info.file is None and not info.file == '':
                print(info.is_photo, info.file)
                # replace_message(call, bot, None, info.text)
                try:
                    bot.delete_message(
                        chat_id=call.message.chat.id, 
                        message_id=call.message.message_id
                        )
                        
                except Exception as e:
                    print(e)
                
                with open(f'{settings.BASE_DIR}//{info.file.url}', 'rb') as file:
                    print(file)
                    bot.send_document(
                        chat_id=call.message.chat.id,
                        document=file,
                        caption=info.text,
                        reply_markup=markup,
                        parse_mode='html'
                    )
            else:
                replace_message(call, bot, markup, info.text)

        
        
@bot.message_handler()
def messages_handler(message: Message):
    state = bot.get_state(user_id=message.from_user.id, chat_id=message.chat.id)
    if state == UsersStates.help_request.name:
        text = f'<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}</strong> –ø–æ–ø—Ä–æ—Å–∏–ª –æ –ø–æ–º–æ—â–∏:\n\n' \
                f'"{message.text}"'
        for admin in ADMINS:
            try:
                bot.send_message(chat_id=admin, text=text, parse_mode='html')
            except Exception as e:
                print(e)
        bot.send_message(
            chat_id=message.chat.id, 
            text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ:\n\n' \
            '<a href="t.me/oksanozka1207">–û–∫—Å–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞</a>\n' \
            '<a href="t.me/zilfia17">–ó—É–ª—å—Ñ–∏—è –ê—Ö–Ω–∞—Ñ–æ–≤–Ω–∞</a>',
            parse_mode='html',
            disable_web_page_preview=True
            )